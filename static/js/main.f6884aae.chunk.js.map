{"version":3,"sources":["components/ReactCounterTimer.tsx","App.tsx","serviceWorker.ts","index.tsx","../../src/index.tsx"],"names":["useState","React","App","count","duration","form","setForm","useDemical","setUseDemical","setCount","setDuration","onChange","e","target","name","Number","value","className","type","checked","step","min","max","onClick","window","location","search","split","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","i","this"],"mappings":"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","file":"static/js/main.f6884aae.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactCountTimer from \"../../../react-count-timer/dist\";\nimport \"./ReactCounterTimer.css\";\n\nconst DEFAULT_COUNT = 500;\nconst DEFAULT_DURATION = 1500;\nconst { useState } = React;\n\nconst App = () => {\n  const [form, setForm] = useState({\n    count: DEFAULT_COUNT,\n    duration: DEFAULT_DURATION,\n  });\n\n  const [useDemical, setUseDemical] = useState(false);\n  const [count, setCount] = useState(DEFAULT_COUNT);\n  const [duration, setDuration] = useState(DEFAULT_DURATION);\n\n  const onChange = (e: React.ChangeEvent) => {\n    const target = e.target as HTMLInputElement;\n    setForm({\n      ...form,\n      [target.name]: Number(target.value),\n    });\n  };\n\n  const onSubmit = () => {\n    setCount(form.count);\n    setDuration(form.duration);\n  };\n\n  return (\n    <div className=\"react-counter-timer\">\n      <h1>react-count-timer</h1>\n\n      <h2>\n        <ReactCountTimer\n          className=\"my-counter\"\n          count={count}\n          duration={duration}\n        />\n      </h2>\n\n      <section>\n        <h3>option</h3>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={useDemical}\n            onChange={(e) =>\n              setUseDemical((e.target as HTMLInputElement).checked)\n            }\n          />\n          use demical\n        </label>\n      </section>\n\n      <section>\n        <h3>count: {form.count}</h3>\n        <input\n          type=\"range\"\n          name=\"count\"\n          step={useDemical ? \"0.01\" : \"\"}\n          min={-99999}\n          max={99999}\n          value={form.count}\n          onChange={onChange}\n        />\n      </section>\n\n      <section>\n        <h3>duration: {form.duration}</h3>\n        <input\n          type=\"range\"\n          name=\"duration\"\n          step={500}\n          max={10000}\n          value={form.duration}\n          onChange={onChange}\n        />\n      </section>\n\n      <button onClick={onSubmit}>submit</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactCountTimer from \"./components/ReactCounterTimer\";\n\nfunction App() {\n  const [, page] = window.location.search.split(\"page=\");\n\n  switch (page) {\n    case \"react-count-timer\":\n      return <ReactCountTimer />;\n\n    default:\n      return null;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar DELAY = 5;\nvar createRef = React.createRef;\nvar CounterComponent = /** @class */ (function (_super) {\n    __extends(CounterComponent, _super);\n    function CounterComponent(props) {\n        var _this_1 = _super.call(this, props) || this;\n        _this_1.$el = createRef();\n        _this_1.timer = 0;\n        _this_1.demicalLength = 0;\n        return _this_1;\n    }\n    CounterComponent.prototype.componentDidMount = function () {\n        this.computeCount();\n    };\n    CounterComponent.prototype.componentDidUpdate = function () {\n        this.computeCount();\n    };\n    CounterComponent.prototype.componentWillUnmount = function () {\n        this.removeTimer();\n    };\n    CounterComponent.prototype.computeCount = function () {\n        var _a, _b;\n        var _c = this.props, count = _c.count, duration = _c.duration;\n        var numbers = [];\n        var from = Number(((_b = (_a = this.$el.current) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.replace(/[^0-9]/g, \"\")) || 0);\n        var numberCount = count - from;\n        var sceneCount = Math.max(DELAY, Math.min(duration, 999999) / DELAY);\n        var demicalLength = Number((count.toString().split(\".\")[1] || \"\").length);\n        for (var i = 0; i < sceneCount; i += 1) {\n            numbers.push(Number((from + (numberCount / (sceneCount - 1)) * i).toFixed(demicalLength)));\n        }\n        this.operateCount(numbers.reverse());\n    };\n    CounterComponent.prototype.operateCount = function (numbers) {\n        var n = __spreadArrays(numbers);\n        this.removeTimer();\n        (function countAction(_this) {\n            _this.timer = setTimeout(function () {\n                if (!n.length)\n                    return;\n                _this.renderCount(n.pop());\n                countAction(_this);\n            }, DELAY);\n        })(this);\n    };\n    CounterComponent.prototype.renderCount = function (number) {\n        var _a;\n        if (!((_a = this.$el.current) === null || _a === void 0 ? void 0 : _a.textContent))\n            return;\n        var _b = number.toString().split(\".\"), integer = _b[0], demical = _b[1];\n        this.$el.current.textContent = \"\" + integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (!!demical ? \".\" + demical : \"\");\n    };\n    CounterComponent.prototype.removeTimer = function () {\n        if (!this.timer)\n            return;\n        clearTimeout(this.timer);\n    };\n    CounterComponent.prototype.render = function () {\n        return (React.createElement(\"span\", { ref: this.$el, className: this.props.className || \"\" }, \"0\"));\n    };\n    return CounterComponent;\n}(React.PureComponent));\nexports.default = CounterComponent;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}